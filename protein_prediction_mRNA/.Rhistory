geom_point() +
stat_function(fun=function(x){x*log(x)}) +
ggtitle('N vs time nlogn') +
xlab('mean time')
lm(n~mean, time)
1/k
#ggplot(time, aes(x=mean, y=n)) +
#  geom_point() +
#  geom_line() +
#  ggtitle('N vs time linear fit') +
#  xlab('mean time') +
#  ylab('log(n)') +
#  scale_y_continuous(trans='log10')
#ggsave('n_time_logscale.png')
#
k=2.5437E-05
time = transform(time, mean_scaled = mean/k)
ggplot(time, aes(x=mean, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}) +
ggtitle('N vs time nlogn') +
xlab('mean time')
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}) +
ggtitle('N vs time nlogn') +
xlab('mean time')
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, mapping=aes(color='red')) +
ggtitle('N vs time nlogn') +
xlab('mean time')
ggsave('nlogn_time.png')
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}) +
ggtitle('N vs time nlogn') +
xlab('mean time')
ggsave('nlogn_time.png')
ggplot(time, aes(x=mean, y=n)) +
geom_point() +
geom_line() +
ggtitle('N vs time linear fit') +
xlab('mean time')
ggsave('n_time_linear.png')
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(x=mean_scaled), color'blue') +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
stat_function(fun=function(x){x*log(x)}, aes(x=mean_scaled, color'blue') +
stat_function(fun=function(x){x*log(x)}, aes(x=mean_scaled, color='blue') +
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(x=mean_scaled, color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(x=mean_scaled, color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
ggplot(time, aes(x=mean, y=n)) +
geom_point() +
geom_line(color='blue') +
ggtitle('N vs time linear fit') +
xlab('mean time') +
theme(legend.position = "none")
ggsave('n_time_linear.png')
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
ggsave('nlogn_time.png')
time = transform(time, mean_scaled = mean*3000)
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
time = transform(time, mean_scaled = mean*3001)
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
time = transform(time, mean_scaled = mean*4001)
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
time = transform(time, mean_scaled = mean*5001)
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)})+#, aes(color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
ggsave('nlogn_time_empiricalk.png')
ggsave('nlogn_time.png')
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
k=2.5437E-05
time = transform(time, mean_scaled = mean/k)
ggplot(time, aes(x=mean_scaled, y=n)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
ggsave('nlogn_time.png')
k=2.5437E-05
time = transform(time, mean_scaled = mean*5000)
ggplot(time, aes(x=y, y=mean_scaled)) +
geom_point() +
stat_function(fun=function(x){x*log(x)})+#, aes(color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
ggplot(time, aes(x=n, y=mean_scaled)) +
geom_point() +
stat_function(fun=function(x){x*log(x)})+#, aes(color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
k=2.5437E-05
time = transform(time, mean_scaled = mean/k)
ggplot(time, aes(x=n, y=mean_scaled)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
ggplot(time, aes(x=n, y=mean_scaled)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(color='blue')) +
ggtitle('N vs time nlogn') +
#xlab('mean time') +
theme(legend.position = "none")
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_line(color='blue') +
ggtitle('N vs time linear fit') +
xlab('mean time') +
theme(legend.position = "none")
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_line(color='blue') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none")
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_line(color='blue') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45))
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_line(color='blue') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45))
ggsave('n_time_linear.png')
time = transform(time, mean_scaled = mean*5000)
time = transform(time, mean_scaled = mean*5000)
ggplot(time, aes(x=n, y=mean_scaled)) +
geom_point() +
stat_function(fun=function(x){x*log(x)})+#, aes(color='blue')) +
ggtitle('N vs time nlogn') +
xlab('mean time') +
theme(legend.position = "none")
ggplot(time, aes(x=n, y=mean_scaled)) +
geom_point() +
stat_function(fun=function(x){x*log(x)})+#, aes(color='blue')) +
ggtitle('N vs time nlogn') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45))
k=2.5437E-05
time = transform(time, mean_scaled = mean/k)
ggplot(time, aes(x=n, y=mean_scaled)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(color='blue')) +
ggtitle('N vs time nlogn') +
#xlab('mean time') +
theme(legend.position = "none")
time = transform(time, mean_scaled = mean/k)
ggplot(time, aes(x=n, y=mean_scaled)) +
geom_point() +
stat_function(fun=function(x){x*log(x)}, aes(color='blue')) +
ggtitle('N vs time nlogn') +
#xlab('mean time') +
theme(legend.position = "none")
ggplot(time, aes(x=n, y=mean_scaled)) +
geom_point() +
stat_function(fun=function(x){x*log(x)})+#, aes(color='blue')) +
ggtitle('N vs time nlogn') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45))
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~x) +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45))
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~x) +
geom_smooth(method='lm', formula= y~x*log(x)) +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45))
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~x) +
geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45))
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~x) +
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45))
ggsave('n_time_linear.png')
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~x) +
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45)) +
scale_x_log10()
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~x, se=None) +
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45)) +
scale_x_log10()
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~x, se=FALSE) +
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45)) +
scale_x_log10()
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~log(x,10), se=FALSE) +
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45)) +
scale_x_log10()
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= log(y,10)~x, se=FALSE) +
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45)) +
scale_x_log10()
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~x^10, se=FALSE) +
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45)) +
scale_x_log10()
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(formula= y~x^10, se=FALSE) +
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45)) +
scale_x_log10()
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='gam', formula= y~x^10, se=FALSE) +
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45)) +
scale_x_log10()
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~x^10, se=FALSE) +
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45)) +
scale_x_log10()
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~x, se=FALSE) +
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45)) +
scale_x_log10()
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~x, se=FALSE,
method.args = list(family = gaussian(link = 'log')))+
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45)) +
scale_x_log10()
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~x, se=FALSE) +
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45)) +
scale_x_log10()
ggplot(time, aes(x=n, y=mean)) +
geom_point() +
geom_smooth(method='lm', formula= y~x, se=FALSE) +
#geom_smooth(method='lm', formula= y~x*log(x), color='red') +
ggtitle('N vs time linear fit') +
ylab('mean time') +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = -45)) #+
#scale_x_log10()
out = lm(mean~n, time)
summary(out)
cr_control = read_csv("C:\Users\Jake Hogan\Downloads\cr_control.csv")
cr_cancer = read_csv("C:\Users\Jake Hogan\Downloads\cr_cancer.csv")
cr_cancer = read_csv("C:Users/Jake Hogan/Downloads/cr_cancer.csv")
library(tidyverse)
library(ggplot)
cr_cancer = read_csv("C:Users/Jake Hogan/Downloads/cr_cancer.csv")
library(tidyverse)
library(ggplot)
cr_cancer = read_csv("C:Users\\Jake Hogan\\Downloads\\cr_cancer.csv")
cr_cancer = read_csv("C:Users/Jake Hogan/Downloads/cr_cancer.csv")
cr_cancer = read.csv("C:Users/Jake Hogan/Downloads/cr_cancer.csv")
getwd()
cr_cancer = read_csv("../Downloads/cr_cancer.csv")
cr_control = read_csv("../cr_control.csv")
cr_cancer.head
head(cr_cancer)
?read_csv
cr_control = read_csv("../cr_control.csv", col_names=T)
cr_cancer = read_csv("../Downloads/cr_cancer.csv")
cr_control = read_csv("../Download/cr_control.csv", col_names=T)
head(cr_cancer)
head(cr_control)
cr_control = read_csv("../Downloads/cr_control.csv", col_names=T)
head(cr_cancer)
head(cr_control)
rbp= read_csv("../Downloads/RBPDB.csv", col_names=T)
rbp = read_csv("../Downloads/RBPDB.csv", col_names=T) %>%
select(gene_name)
rbp
rownames(cr_control)
head(cr_cancer)
head(cr_control)
rownames(cr_control)
cr_cancer = read_csv("../Downloads/cr_cancer.csv", col_names = T)
cr_cancer
rownames(cr_cancer) = cr_cancer$X1
row_names(cr_cancer) = cr_cancer$X1
rownames(cr_cancer) = cr_cancer$X1
cr_cancer = read.csv("../Downloads/cr_cancer.csv", col_names = T)
cr_cancer = read.csv("../Downloads/cr_cancer.csv")
cr_cancer
:w
rownames(cr_cancer)
cr_cancer = read.csv("../Downloads/cr_cancer.csv") #%>%
row.names(cr_cancer)
cr_cancer = read.csv("../Downloads/cr_cancer.csv") #%>%
head(cr_cancer)
rownames(cr_cancer)
cr_cancer[1,1]
cr_cancer[1]]
cr_cancer[1]]
cr_cancer[1]
cr_cancer.shape
dim(cr_cancer)
cr_cancer = read.csv("../Downloads/cr_cancer.csv")
rownames(cr_cancer) = cr_cancer$patient
cr_cancer = read.csv("../Downloads/cr_cancer.csv")
cr_control = read_csv("../Downloads/cr_control.csv", col_names=T)
dim(cr_cancer)
dim(cr_control)
dim(merge(cr_cancer, cr_control))
cr_cancer$paA1BG
cr_cancer$patient
colnames(cr_cancer)
colnames(cr_cancer)[1]
cr_cancer$ï..patient
canc=cr_cancer$ï..patient
cont=cr_control$ï..patient
cont=cr_control$patient
set(canc, control)
intersect(canc, control)
intersect(canc, cont)
canc
cont
type(canc)
type(cont)
typeof(cont)
typeof(canc)
cr_cancer = read_csv("../Downloads/cr_cancer.csv")
cr_control = read_csv("../Downloads/cr_control.csv", col_names=T)
rowames(rbp) =
head(cr_cancer)
head(cr_control)
intersect(cr_cancer$patient, cr_control$patient)
cr_cancer$patient
cr_control$patient
ev_cancer = read_csv("../Downloads/ev_cancer.csv")
en_cancer = read_csv("../Downloads/en_cancer.csv")
en_control = read_csv("../Downloads/en_control.csv", col_names=T)
intersect(en_cancer$X1, en_control$X1)
en_cancer
en_cancer$X1
en_control$X1
cr_cancer$patient
cr_control$patient
dim(cr_control)
dim(cr_cancer)
library(tidyverse)
library(ggplot2)
library(os)
colon_df = read_csv('colon_dataset_df.csv')
##############CREATE COLON DATAFRAME#################
colon_df = read_csv('colon_dataset_df.csv')
##############CREATE COLON DATAFRAME#################
colon_df = read_csv('colon_dataset_df.csv')
getAccess()
getcwd()
getwd()
setwd("C:/Users/Jake Hogan/CS/bioinf_capstone/protein_prediction_mRNA")
##############CREATE COLON DATAFRAME#################
colon_df = read_csv('colon_dataset_df.csv')
head(colon_df)
##############CREATE COLON DATAFRAME#################
colon_df = read_csv('colon_dataset_df.csv') %>% drop(X1)
colon_df
##############CREATE COLON DATAFRAME#################
colon_df = read_csv('colon_dataset_df.csv') %>% select(-X1)
colon_df
?pivot_wider
out_df = pivot_wider(colon_df, c(Gene_Name, protein))
out_df
out_df = pivot_wider(colon_df, values_from=c(Gene_Name, protein), names_from=Patiend_ID)
colon_df$columns
columns(colon_df)
column(colon_df)
cols(colon_df)
colnames(colon_df)
out_df = pivot_wider(colon_df, values_from=c(Gene_Name, protein), names_from=Patiend_ID)
out_df = pivot_wider(colon_df, values_from=c(Gene_Name, protein), names_from='Patiend_ID')
out_df = pivot_wider(colon_df, values_from=c(Gene_Name, protein), names_from=Patient_ID)
out_df
out_df = pivot_wider(colon_df, values_from=c(Gene_Name, protein), names_from=Patient_ID)
